name: Release CLI

on:
  push:
    branches:
      - release # Trigger on pushes to the release branch

permissions:
  contents: write

jobs:
  build-and-upload-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to fetch tags

      - name: Get Latest Git Tag & Increment Version
        id: version
        run: |
          # Get the latest tag, fallback to v0.1.0 if no tags exist
          LATEST_TAG=$(git describe --tags --match "v[0-9]*" --abbrev=0 2>/dev/null || echo "v0.1.0")

          # Extract numeric version (remove 'v' prefix)
          VERSION=${LATEST_TAG#v}

          # Extract major, minor, and patch numbers
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)

          # Increment the patch version
          NEW_VERSION="$MAJOR.$MINOR.$(($PATCH + 1))"
          NEW_TAG="v$NEW_VERSION"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create Git Tag and Push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Build CLI for All Platforms
        run: |
          make release

      - name: Create tarballs
        run: |
          mv vault-darwin-amd64 vault
          tar -czvf vault-darwin-amd64.tar.gz vault

          mv vault-darwin-arm64 vault
          tar -czvf vault-darwin-arm64.tar.gz vault

          mv vault-linux-amd64 vault
          tar -czvf vault-linux-amd64.tar.gz vault

          mv vault-linux-arm64 vault
          tar -czvf vault-linux-arm64.tar.gz vault

          mv vault-windows-amd64.exe vault.exe
          tar -czvf vault-windows-amd64.tar.gz vault.exe

      - name: Compute SHA256 checksums
        run: |
          sha256sum vault-*.tar.gz > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ env.NEW_TAG }}"
          name: "Release ${{ env.NEW_VERSION }}"
          generate_release_notes: true
          files: |
            vault-linux-arm64
            vault-darwin-arm64
            vault-darwin-amd64
            vault-linux-amd64
            vault-windows-amd64.exe
            vault-darwin-amd64.tar.gz
            vault-linux-amd64.tar.gz
            vault-darwin-arm64.tar.gz
            vault-linux-arm64.tar.gz
            vault-windows-amd64.tar.gz
            checksums.txt
          body: "New release for vault CLI"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: build-and-upload-artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Homebrew Tap Repository
        uses: actions/checkout@v4
        with:
          repository: fagom/homebrew-vault
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Fetch Latest Tag Version
        run: |
          echo "NEW_VERSION=${{ env.NEW_VERSION }}" >> $GITHUB_ENV

      - name: Download the checksums from release
        run: |
          curl -L -o checksums.txt https://github.com/fagom/vault-cli/releases/download/${{ env.NEW_TAG }}/checksums.txt
          cat checksums.txt

      - name: Extract SHA256 checksums
        run: |
          export SHA256_DARWIN_AMD64=$(grep vault-darwin-amd64.tar.gz checksums.txt | awk '{ print $1 }')
          export SHA256_DARWIN_ARM64=$(grep vault-darwin-arm64.tar.gz checksums.txt | awk '{ print $1 }')
          export SHA256_LINUX_AMD64=$(grep vault-linux-amd64.tar.gz checksums.txt | awk '{ print $1 }')
          export SHA256_LINUX_ARM64=$(grep vault-linux-arm64.tar.gz checksums.txt | awk '{ print $1 }')

          echo "SHA256_DARWIN_AMD64=$SHA256_DARWIN_AMD64" >> $GITHUB_ENV
          echo "SHA256_DARWIN_ARM64=$SHA256_DARWIN_ARM64" >> $GITHUB_ENV
          echo "SHA256_LINUX_AMD64=$SHA256_LINUX_AMD64" >> $GITHUB_ENV
          echo "SHA256_LINUX_ARM64=$SHA256_LINUX_ARM64" >> $GITHUB_ENV

      - name: Update Homebrew Formula
        run: |
          FORMULA_FILE="Formula/vault.rb"

          sed -i "s/^  version \".*\"/  version \"${NEW_VERSION}\"/" $FORMULA_FILE

          sed -i "s|url \".*vault-darwin-amd64.tar.gz\"|url \"https://github.com/fagom/vault-cli/releases/download/${NEW_TAG}/vault-darwin-amd64.tar.gz\"|g" $FORMULA_FILE
          sed -i "s|url \".*vault-darwin-arm64.tar.gz\"|url \"https://github.com/fagom/vault-cli/releases/download/${NEW_TAG}/vault-darwin-arm64.tar.gz\"|g" $FORMULA_FILE
          sed -i "s|url \".*vault-linux-amd64.tar.gz\"|url \"https://github.com/fagom/vault-cli/releases/download/${NEW_TAG}/vault-linux-amd64.tar.gz\"|g" $FORMULA_FILE
          sed -i "s|url \".*vault-linux-arm64.tar.gz\"|url \"https://github.com/fagom/vault-cli/releases/download/${NEW_TAG}/vault-linux-arm64.tar.gz\"|g" $FORMULA_FILE

          sed -i "s|sha256 \".*\" # darwin-amd64|sha256 \"${SHA256_DARWIN_AMD64}\" # darwin-amd64|g" $FORMULA_FILE
          sed -i "s|sha256 \".*\" # darwin-arm64|sha256 \"${SHA256_DARWIN_ARM64}\" # darwin-arm64|g" $FORMULA_FILE
          sed -i "s|sha256 \".*\" # linux-amd64|sha256 \"${SHA256_LINUX_AMD64}\" # linux-amd64|g" $FORMULA_FILE
          sed -i "s|sha256 \".*\" # linux-arm64|sha256 \"${SHA256_LINUX_ARM64}\" # linux-arm64|g" $FORMULA_FILE

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/vault.rb
          git commit -m "Update vault formula to version ${NEW_VERSION}"
          git push origin main
